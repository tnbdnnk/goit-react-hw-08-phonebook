{"version":3,"file":"static/js/358.ecd8cf8d.chunk.js","mappings":"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","sources":["hooks/useContact.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/SortingButtons/SortingButtons.module.css?f663","components/SortingButtons/SortingButtons.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport {\n    getContacts,\n    getError,\n    getLoading,\n    getRecentlyAdded,\n    getSortedAlphabetic,\n    getVisibleContacts,\n} from 'reduxx/contacts/selectors';\n\nexport const useContacts = () => {\n    const contacts = useSelector(getContacts);\n    const visibleContacts = useSelector(getVisibleContacts);\n    const error = useSelector(getError);\n    const isLoading = useSelector(getLoading);\n    const sortedAlphabetic = useSelector(getSortedAlphabetic);\n    const recentlyAdded = useSelector(getRecentlyAdded);\n\n    return {\n        contacts,\n        visibleContacts,\n        error,\n        isLoading,\n        sortedAlphabetic,\n        recentlyAdded,\n    };\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactForm__title\":\"ContactForm_contactForm__title__OassT\"};","import { useDispatch } from \"react-redux\";\nimport { addContact } from \"reduxx/contacts/operations\";\nimport { useContacts } from \"hooks/useContact\";\nimport Notiflix from \"notiflix\";\n// import { RiContactsLine } from \"react-icons/ri\";\n// import ContactsIcon from '@mui/icons-material/Contacts';\n// import Loader from \"components/Loader/Loader\";\n\nimport css from './ContactForm.module.css';\nimport cssUtils from 'cssCommonComponents/cssUtils.module.css';\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const { contacts } = useContacts();\n    // const { isLoading } = useContacts();\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const { name, number } = e.target;\n        const contact = { name: name.value, number: number.value };\n\n        if (contacts.find(existingContact => existingContact.name.toLowerCase() === name.value.toLowerCase())) {\n            Notiflix.Notify.failure(`${contact.name} is already in your contacts.`);\n        } else {\n            dispatch(addContact(contact));\n        }\n        e.target.reset();\n    }\n\n    return (\n        <>\n            <h2 className={css.contactForm__title}>Phonebook</h2>\n            <form\n                onSubmit={handleSubmit}\n                className={cssUtils.form}\n            >\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n                    required\n                    placeholder=\"Name\"\n                    className={cssUtils.form__input}\n                />\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    placeholder=\"Phone\"\n                    className={cssUtils.form__input}\n                />\n                <button className={cssUtils.button__dark} type=\"submit\">\n                    <span>Add contact</span>\n                    {/* {isLoading ? (\n                        <Loader color={'#ffffff'} size={'20'} />\n                    ) : (\n                            <ContactsIcon size={'20'}/>\n                    )} */}\n                </button>\n            </form>\n        </>\n    );\n}\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"filter__input\":\"Filter_filter__input__toa89\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'reduxx/contacts/filterSlice';\nimport { getFilter } from 'reduxx/contacts/selectors';\n\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n\n    const showFilteredContacts = e => {\n        dispatch(filterContacts(e.target.value));\n    };\n\n    return (\n            <input\n                placeholder=\"Find contacts by name\"\n                className={css.filter__input}\n                value={filter.filter}\n                type=\"search\"\n                onChange={showFilteredContacts}\n            />\n    );\n};","import React from \"react\";\nimport { ThreeCircles } from \"react-loader-spinner\";\n\nconst Loader = () => {\n    <div>\n        <ThreeCircles \n            visible={true}\n            height=\"200\"\n            width=\"200\"\n            color=\"#000000\"\n            ariaLabel=\"three-circles-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"\"\n        />\n    </div>\n}\n\nexport default Loader;","// extracted by mini-css-extract-plugin\nexport default {\"sortBtns__wrapper\":\"SortingButtons_sortBtns__wrapper__Ol6ps\",\"sortBtns\":\"SortingButtons_sortBtns__iQ04H\"};","import { useDispatch } from \"react-redux\";\n// import { useContacts } from \"hooks/useContact\";\nimport { sortByAdded, sortByName } from \"reduxx/contacts/contactSlice\";\n// import {\n//     TbSortAscendingLetters,\n//     TbSortDescendingLetters,\n//     TbSortAscending2,\n//     TbSortDescending2,\n// } from 'react-icons/tb';\n\nimport css from './SortingButtons.module.css';\n\nconst SortingButtons = () => {\n    const dispatch = useDispatch();\n    // const { sortedAlphabetic } = useContacts();\n    // const { recentlyAdded } = useContacts();\n\n    return (\n        <div className={css.sortBtns__wrapper}>\n            <button\n                onClick={() => dispatch(sortByName())}\n                className={css.sortBtns}\n            >\n                Sort by name \n                {/* {sortedAlphabetic ? (\n                    <TbSortDescendingLetters size={'30'}/>\n                ) : (\n                    <TbSortAscendingLetters size={'30'} />\n                )} */}\n            </button>\n            <button\n                onClick={() => dispatch(sortByAdded())}\n                className={css.sortBtns}\n            >\n                Recently added{' '}\n                {/* {recentlyAdded ? (\n                    <TbSortAscending2 size={'30'} />\n                ) : (\n                        <TbSortDescending2 size={'30'} />\n                )} */}\n            </button>\n        </div>\n    )\n}\n\nexport default SortingButtons;","// extracted by mini-css-extract-plugin\nexport default {\"contacts__span\":\"ContactsList_contacts__span__AM3Qd\",\"contacts__list\":\"ContactsList_contacts__list__0rgaD\",\"contacts__item\":\"ContactsList_contacts__item__Bl6YX\",\"contacts__button\":\"ContactsList_contacts__button__xkM5F\"};","// import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"reduxx/contacts/operations\";\nimport { useContacts } from \"hooks/useContact\";\nimport Loader from \"components/Loader/Loader\";\nimport SortingButtons from \"components/SortingButtons/SortingButtons\";\nimport DeleteIcon from '@mui/icons-material/Delete';\n// import Modal from \"components/Modal/Modal\";\n// import EditIcon from '@mui/icons-material/Edit';\nimport Swal from \"sweetalert2\";\n\nimport css from './ContactsList.module.css';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const { visibleContacts } = useContacts();\n    const { isLoading } = useContacts();\n    // const [isModalOpen, setIsModalOpen] = useState(false);\n    // const [targetContact, setTargetContact] = useState({});\n\n    // const toggleOpen = () => {\n    //     setIsModalOpen(!isModalOpen);\n    // }\n\n    // const handleClick = e => {\n    //     const id = e.currentTarget.parentNode.dataset.id;\n    //     const targetContact = visibleContacts.find(contact => contact.id === id);\n    //     setTargetContact(targetContact);\n    //     toggleOpen();\n    // };\n\n    const handleDelete = id => {\n        Swal.fire({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                color: '#000',\n                padding: '12px 36px 24px 36px',\n                // icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#000',\n                cancelButtonColor: '#CD4631',\n                confirmButtonText: 'Yes, delete!',\n                width: '420px',\n                borderRadius: '14px',\n                borderColor: '#000',\n                border: '2px solid',\n                \n            }).then(result => {\n                if (result.isConfirmed) {\n                    dispatch(deleteContact(id));\n                    Swal.fire({\n                        title: 'Deleted!',\n                        text: 'Your file has been deleted.',\n                        color: '#000',\n                        confirmButtonColor: '#000',\n                        width: '420px',\n                        borderRadius: '14px',\n                        borderColor: '#000',\n                        border: '2px solid',\n                        padding: '12px 36px 24px 36px',\n                    });\n            }\n        });\n    }\n\n    return (\n        <>\n            <SortingButtons />\n            {isLoading ? (\n                <span>\n                    {' '}\n                    <Loader color={'#CD4631'} size={'50'} />\n                </span>\n            ) : (\n                    <ul className={css.contacts__list}>\n                        {visibleContacts.map(({ name, number, id }) => {\n                            return (\n                                <li\n                                    data-id={id}\n                                    key={id}\n                                    className={css.contacts__item}\n                                >\n                                    {name} : {number}\n                                    <div>\n                                        {/* <button type=\"button\" onClick={handleClick}>\n                                            <EditIcon size=\"20\"/>\n                                        </button> */}\n                                        <button\n                                            type=\"button\"\n                                            onClick={() => handleDelete(id)}\n                                            className={css.contacts__button}\n                                        >\n                                            {isLoading ? (\n                                                <Loader color={'#CD4631'} size={'20'} />\n                                            ) : (\n                                                <DeleteIcon size=\"10\" />\n                                            )}\n                                        </button>\n                                    </div>\n                                    {/* {isModalOpen && (\n                                        <Modal toggleOpen={toggleOpen} contactInfo={targetContact} />\n                                    )} */}\n                                </li>\n                            )\n                        })}\n                </ul>\n            )}\n        </>\n    )\n}\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"contacts__section\":\"Contacts_contacts__section__wRF5v\",\"contacts__wrap\":\"Contacts_contacts__wrap__7vqWm\",\"contactsList__wrap\":\"Contacts_contactsList__wrap__ORqhN\",\"contacts__title\":\"Contacts_contacts__title__ZEWHT\",\"contacts__wrapper\":\"Contacts_contacts__wrapper__S9QJO\",\"contacts__message\":\"Contacts_contacts__message__BuTJu\"};","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport ContactList from 'components/ContactsList/ContactsList';\nimport { useContacts } from 'hooks/useContact';\nimport { getContacts } from 'reduxx/contacts/operations';\n\nimport css from './Contacts.module.css';\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const { contacts } = useContacts();\n\n    useEffect(() => {\n        dispatch(getContacts());\n    }, [dispatch]);\n\n    return (\n        <section className={css.contacts__section}>\n        <div className={css.contacts__wrap}>\n            <ContactForm />\n        </div>\n        <div className={css.contactsList__wrap}>\n            <h2 className={css.contacts__title}>Contacts</h2>\n            <div className={css.contacts__wrapper}>\n            <Filter />\n            {contacts.length > 0 ? (\n                <ContactList />\n            ) : (\n                <p className={css.contacts__message}>Add your first contact</p>\n            )}\n            </div>\n        </div>\n        </section>\n    );\n};\n\nexport default Contacts;\n"],"names":["useContacts","contacts","useSelector","getContacts","visibleContacts","getVisibleContacts","error","getError","isLoading","getLoading","sortedAlphabetic","getSortedAlphabetic","recentlyAdded","getRecentlyAdded","dispatch","useDispatch","_jsxs","_Fragment","children","_jsx","className","css","onSubmit","e","preventDefault","_e$target","target","name","number","contact","value","find","existingContact","toLowerCase","Notiflix","concat","addContact","reset","cssUtils","type","title","required","placeholder","Filter","filter","getFilter","onChange","filterContacts","ThreeCircles","onClick","sortByName","sortByAdded","SortingButtons","Loader","color","size","map","_ref","id","Swal","text","padding","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","width","borderRadius","borderColor","border","then","result","isConfirmed","deleteContact","handleDelete","DeleteIcon","useEffect","ContactForm","length","ContactList"],"sourceRoot":""}